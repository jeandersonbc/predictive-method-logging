/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package experiment.component;

import com.sun.tools.javac.util.List;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.eclipse.jdt.core.dom.FileASTRequestor;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.util.Hashtable;
import java.util.Set;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

class LogPlacementAnalyzerTest {

    private static final LogPlacementAnalyzer analyzer = new LogPlacementAnalyzer();
    private static final String FILE_NAME = "/Sample.java";

    @BeforeAll
    public static void run() {
        String resourcePath = LogPlacementAnalyzerTest.class.getResource(FILE_NAME).getPath();
        String[] sources = new String[]{resourcePath};

        ASTParser parser = ASTParser.newParser(AST.JLS13);
        Hashtable<String, String> options = JavaCore.getOptions();
        JavaCore.setComplianceOptions(JavaCore.VERSION_13, options);
        parser.setCompilerOptions(options);
        FileASTRequestor executor = new FileASTRequestor() {

            @Override
            public void acceptAST(String sourceFilePath, CompilationUnit ast) {
                ast.accept(analyzer);
            }
        };
        parser.createASTs(sources, null, null, executor, null);
    }

    @Test
    void testAnalyzerCounting() {
        assertEquals(11, analyzer.countingVisitedMethods());
        assertEquals(17, analyzer.visitedLogStatements().size());
        assertEquals(9, analyzer.countingLoggedMethods());
    }

    @Test
    void testMethodSignature() {
        Set<String> visitedMethodsWithLogStatements = analyzer.visitedLogStatements().stream().map(e -> e.method).collect(Collectors.toSet());
        List.of("(initializer 1)",
                "(initializer 2)",
                "Sample()",
                "run(int[])",
                "process(List<Object>)",
                "Sample(Foo, int)",
                "run(String[])"
                ).forEach(
                e -> assertTrue(visitedMethodsWithLogStatements.contains(e),
                        String.format("%s not present in %s", e, visitedMethodsWithLogStatements))
        );
    }

}
